// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int           @id @default(autoincrement())
  email       String        @unique
  password    String
  firstName   String
  lastName    String
  address     String?
  gender      Gender?
  phoneNumber String?       @unique
  image       String?
  dob         DateTime?     @db.Timestamptz(3)
  roleId      Role          @default(USER)
  status      Status?       @default(ACTIVE)
  createdAt   DateTime?     @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime?     @updatedAt @db.Timestamptz(3)
  addressUser AddressUser[]
  Comment     Comment[]
  ShopCart    ShopCart[]
  VoucherUsed VoucherUsed[]
}

model AddressUser {
  id           Int            @id @default(autoincrement()) @map("_id")
  userId       Int
  user         User           @relation(fields: [userId], references: [id], onDelete: Cascade)
  shipName     String?
  shipAddress  String?
  shipPhone    String?
  shipEmail    String?
  createdAt    DateTime?      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime?      @updatedAt @db.Timestamptz(3)
  OrderProduct OrderProduct[]
}

model CommentImage {
  id        Int       @id @default(autoincrement())
  image_url String?
  commentId Int?
  comment   Comment?  @relation(fields: [commentId], references: [id], onDelete: Cascade)
  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
}

model Comment {
  id           Int            @id @default(autoincrement())
  content      String?
  productId    Int?
  product      Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId       Int?
  user         User?          @relation(fields: [userId], references: [id], onDelete: Cascade)
  star         Int?
  createdAt    DateTime?      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime?      @updatedAt @db.Timestamptz(3)
  CommentImage CommentImage[]
}

model OrderDetaill {
  id            Int           @id @default(autoincrement())
  orderId       Int?
  order         OrderProduct? @relation(fields: [orderId], references: [id], onDelete: Cascade)
  productSizeId Int?
  productSize   ProductSize?  @relation(fields: [productSizeId], references: [id], onDelete: Cascade)
  quantity      Int?
  createdAt     DateTime?     @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime?     @updatedAt @db.Timestamptz(3)
}

model OrderProduct {
  id              Int            @id @default(autoincrement())
  addressUserId   Int?
  addressUser     AddressUser?   @relation(fields: [addressUserId], references: [id], onDelete: Cascade)
  isPaymentOnline Int?
  totalPrice      Int?
  createdAt       DateTime?      @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime?      @updatedAt @db.Timestamptz(3)
  OrderDetaill    OrderDetaill[]
  TypeShip        TypeShip?      @relation(fields: [typeShipId], references: [id])
  typeShipId      Int?
  Voucher         Voucher?       @relation(fields: [voucherId], references: [id])
  voucherId       Int?
}

model ProductSize {
  id           Int            @id @default(autoincrement())
  productId    Int?
  product      Product?       @relation(fields: [productId], references: [id], onDelete: Cascade)
  size         Size?
  quantity     Int?
  createdAt    DateTime?      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime?      @updatedAt @db.Timestamptz(3)
  ShopCart     ShopCart[]
  OrderDetaill OrderDetaill[]
}

model ProductImage {
  id        Int       @id @default(autoincrement())
  productId Int?
  product   Product?  @relation(fields: [productId], references: [id], onDelete: Cascade)
  image_url String?
  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
}

model Product {
  id              Int            @id @default(autoincrement())
  name            String?
  contentHTML     String?
  contentMarkdown String?
  status          Status?
  categoryId      Int?
  category        Category?      @relation(fields: [categoryId], references: [id])
  material        String?
  brandId         Int?
  originalPrice   Int?
  discountPrice   Int?
  brand           Brand?         @relation(fields: [brandId], references: [id])
  Comment         Comment[]
  ProductSize     ProductSize[]
  ProductImage    ProductImage[]
  createdAt       DateTime?      @default(now()) @db.Timestamptz(3)
  updatedAt       DateTime?      @updatedAt @db.Timestamptz(3)
}

model ShopCart {
  id            Int          @id @default(autoincrement())
  userId        Int?
  user          User?        @relation(fields: [userId], references: [id], onDelete: Cascade)
  productSizeId Int?
  productSize   ProductSize? @relation(fields: [productSizeId], references: [id], onDelete: Cascade)
  quantity      Int?
  createdAt     DateTime?    @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime?    @updatedAt @db.Timestamptz(3)

  @@unique([userId, productSizeId])
}

model TypeShip {
  id           Int            @id @default(autoincrement())
  name         String         @unique
  price        Int?
  createdAt    DateTime?      @default(now()) @db.Timestamptz(3)
  updatedAt    DateTime?      @updatedAt @db.Timestamptz(3)
  OrderProduct OrderProduct[]
}

model TypeVoucher {
  id          Int       @id @default(autoincrement())
  typeVoucher Discount?
  value       Int?
  maxValue    Int?
  minValue    Int?
  createdAt   DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt   DateTime? @updatedAt @db.Timestamptz(3)
  Voucher     Voucher[]
}

model Voucher {
  id            Int            @id @default(autoincrement())
  fromDate      DateTime?      @db.Timestamptz(3)
  toDate        DateTime?      @db.Timestamptz(3)
  typeVoucherId Int?
  typeVoucher   TypeVoucher?   @relation(fields: [typeVoucherId], references: [id])
  amount        Int?
  codeVoucher   String?
  createdAt     DateTime?      @default(now()) @db.Timestamptz(3)
  updatedAt     DateTime?      @updatedAt @db.Timestamptz(3)
  OrderProduct  OrderProduct[]
  VoucherUsed   VoucherUsed[]
}

model VoucherUsed {
  id        Int       @id @default(autoincrement())
  userId    Int?
  user      User?     @relation(fields: [userId], references: [id])
  voucherId Int?
  voucher   Voucher?  @relation(fields: [voucherId], references: [id])
  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
}

enum Role {
  ADMIN
  USER
  SHIPPER
  SALER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Gender {
  NAM
  NU
  KHAC
}

model Category {
  id        Int       @id @default(autoincrement())
  name      String
  brandId   Int?
  brand     Brand?    @relation(fields: [brandId], references: [id])
  createdAt DateTime? @default(now()) @db.Timestamptz(3)
  updatedAt DateTime? @updatedAt @db.Timestamptz(3)
  Product   Product[]

  @@unique([name, brandId])
}

model Brand {
  id        Int        @id @default(autoincrement())
  name      String     @unique
  createdAt DateTime?  @default(now()) @db.Timestamptz(3)
  updatedAt DateTime?  @updatedAt @db.Timestamptz(3)
  Product   Product[]
  Category  Category[]
}

enum Discount {
  PHAN_TRAM
  VND
}

enum Size {
  S
  M
  L
  XL
  XXL
}
